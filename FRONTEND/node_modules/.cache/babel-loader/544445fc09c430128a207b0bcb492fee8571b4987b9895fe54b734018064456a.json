{"ast":null,"code":"import { EventBus } from \"@/main\";\nexport default {\n  name: \"PhotoUploadEdition\",\n  props: {\n    actorId: {\n      type: String,\n      required: true\n    }\n  },\n  watch: {\n    actorId: {\n      handler: function () {\n        this.retrieveImages();\n      }\n    }\n  },\n  data: () => ({\n    titleRule: [v => new RegExp(/^[a-zA-Z0-9\\s]*$/).test(v) || 'El título solo puede contener: Letras, números y espacios'],\n    photos: [],\n    newMultimedia: null,\n    uploading: false\n  }),\n  created() {\n    this.initMultimedia();\n    this.retrieveImages();\n  },\n  methods: {\n    addFile(file) {\n      if (file == null || this.newMultimedia.name.length < 1) {\n        EventBus.$emit('alert', {\n          color: 'red',\n          type: 'error',\n          msg: 'Debes especificar un archivo y un título'\n        });\n        return;\n      }\n      if (!new RegExp(/^[a-zA-Z0-9\\s]*$/).test(this.newMultimedia.name)) {\n        EventBus.$emit('alert', {\n          color: 'red',\n          type: 'error',\n          msg: 'El título del archivo solo puede contener: Letras, números y espacios'\n        });\n        return;\n      }\n      this.uploading = true;\n      const fileToUpload = new FormData();\n      fileToUpload.append('cda_file', file);\n      this.newMultimedia.file = fileToUpload;\n      this.axios.post(`/upload/photos/${this.actorId}/${this.newMultimedia.name}`, this.newMultimedia.file).then(res => {\n        EventBus.$emit('alert', {\n          color: 'green',\n          type: 'success',\n          msg: res.data.message\n        });\n        if (res.data.firstImage) EventBus.$emit('toActorGallery_reloadGallery');\n      }).catch(e => {\n        if (e.response.status === 500) {\n          EventBus.$emit('alert', {\n            color: 'red',\n            type: 'error',\n            msg: e.response.data.message\n          });\n        } else {\n          console.log(e);\n          EventBus.$emit('alert', {\n            color: 'red',\n            type: 'error',\n            msg: 'Ha ocurrido un error al subir el archivo'\n          });\n        }\n      }).finally(() => {\n        this.uploading = false;\n        this.initMultimedia();\n        this.retrieveImages();\n      });\n    },\n    retrieveImages() {\n      this.axios.get(`/images/retrieve/${this.actorId}`).then(res => {\n        this.photos = res.data.photos;\n        EventBus.$emit('toEditMultimedia_phoUpload_retrieveImg', this.photos);\n      }).catch(e => {\n        console.log(e);\n        EventBus.$emit('alert', {\n          color: 'red',\n          type: 'error',\n          msg: e.response.data.message\n        });\n      });\n    },\n    changeMainImage(publicId) {\n      this.axios.post(`/images/main/${this.actorId}/${publicId}`).then(res => {\n        if (res.status === 200) {\n          EventBus.$emit('alert', {\n            color: 'green',\n            type: 'success',\n            msg: res.data.message\n          });\n        }\n        this.retrieveImages();\n        EventBus.$emit('toActorGallery_reloadGallery');\n      }).catch(e => {\n        EventBus.$emit('alert', {\n          color: 'red',\n          type: 'error',\n          msg: e.response.data.message\n        });\n      });\n    },\n    deleteImage(publicId) {\n      this.axios.delete(`/images/delete/${this.actorId}/${publicId}`).then(res => {\n        if (res.status === 200) {\n          EventBus.$emit('alert', {\n            color: 'green',\n            type: 'success',\n            msg: res.data.message\n          });\n        }\n        this.retrieveImages();\n      }).catch(e => {\n        EventBus.$emit('alert', {\n          color: 'red',\n          type: 'error',\n          msg: e.response.data.message\n        });\n      });\n    },\n    initMultimedia() {\n      this.newMultimedia = {\n        source: '',\n        name: '',\n        file: null\n      };\n    }\n  }\n};","map":{"version":3,"mappings":"AAuGA;AACA;EACAA;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAH;MACAI;QACA;MACA;IACA;EACA;EACAC;IACAC,YACAC,2GACA;IACAC;IACAC;IACAC;EACA;EACAC;IACA;IACA;EACA;EACAC;IACAC;MAEA;QACAC;UACAC;UACAd;UACAe;QACA;QACA;MACA;MAEA;QACAF;UACAC;UACAd;UACAe;QACA;QACA;MACA;MAEA;MACA;MACAC;MACA;MACA,WACAC,kEACA,wBACA,CACAC;QACAL;UACAC;UACAd;UACAe;QACA;QACA;MACA,GACAI;QACA;UACAN;YACAC;YACAd;YACAe;UACA;QACA;UACAK;UACAP;YACAC;YACAd;YACAe;UACA;QACA;MACA,GACAM;QACA;QACA;QACA;MACA;IACA;IACAC;MACA,WACAC,wCACAL;QACA;QACAL;MACA,GACAM;QACAC;QACAP;UACAC;UACAd;UACAe;QACA;MACA;IACA;IACAS;MACA,WACAP,iDACAC;QACA;UACAL;YACAC;YACAd;YACAe;UACA;QACA;QACA;QACAF;MACA,GACAM;QACAN;UACAC;UACAd;UACAe;QACA;MACA;IACA;IACAU;MACA,WACAC,qDACAR;QACA;UACAL;YACAC;YACAd;YACAe;UACA;QACA;QACA;MACA,GACAI;QACAN;UACAC;UACAd;UACAe;QACA;MACA;IACA;IACAY;MACA;QACAC;QACA/B;QACAgC;MACA;IACA;EACA;AACA","names":["name","props","actorId","type","required","watch","handler","data","titleRule","v","photos","newMultimedia","uploading","created","methods","addFile","EventBus","color","msg","fileToUpload","post","then","catch","console","finally","retrieveImages","get","changeMainImage","deleteImage","delete","initMultimedia","source","file"],"sourceRoot":"src/components/forms","sources":["PhotoUploadEdition.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row class=\"px-6\">\n      <v-col cols=\"5\">\n        <v-text-field\n            prepend-icon=\"mdi-format-text\"\n            label=\"Título de archivo\"\n            :rules=titleRule\n            v-model=newMultimedia.name\n        ></v-text-field>\n      </v-col>\n      <v-col cols=\"6\">\n        <v-file-input\n            label=\"Archivo\"\n            :loading=\"uploading\"\n            accept=\"image/png, image/jpeg, image/bmp\"\n            v-model=newMultimedia.file\n        ></v-file-input>\n      </v-col>\n      <v-col\n          class=\"d-flex justify-center align-center\"\n      >\n        <v-btn\n            icon\n            outlined\n            @click=addFile(newMultimedia.file)\n        >\n          <v-icon>\n            mdi-upload\n          </v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n    <v-row class=\"px-6\">\n      <v-col\n          v-for=\"img in photos\"\n          class=\"d-flex justify-center\"\n      >\n        <v-card\n            outlined\n            class=\"pa-1\"\n            width=\"200px\"\n        >\n          <v-img\n              :key=img.publicId\n              :src=img.secureUrl\n              aspect-ratio=\"1\"\n              class=\"grey lighten-2 actorImg align-end\"\n          >\n            <template v-slot:placeholder>\n              <v-row\n                  class=\"fill-height ma-0\"\n                  align=\"center\"\n                  justify=\"center\"\n              >\n                <v-progress-circular\n                    indeterminate\n                    color=\"grey lighten-5\"\n                ></v-progress-circular>\n              </v-row>\n            </template>\n            <v-card-actions\n                class=\"d-flex justify-center align-center\"\n            >\n              <v-btn\n                  x-small\n                  tile\n                  color=\"teal lighten-3\"\n                  :disabled=img.main\n                  @click=changeMainImage(img.publicId)\n              >\n                <v-icon>\n                  mdi-check\n                </v-icon>\n              </v-btn>\n              <v-btn\n                  x-small\n                  tile\n                  color=\"deep-orange lighten-3\"\n                  :disabled=img.main\n                  @click=deleteImage(img.publicId)\n              >\n                <v-icon>\n                  mdi-close\n                </v-icon>\n              </v-btn>\n            </v-card-actions>\n          </v-img>\n          <v-card-subtitle>\n              <span\n                  class=\"d-inline-block text-truncate\"\n                  style=\"max-width: 150px;\"\n              >\n                {{ img.title }}\n              </span>\n          </v-card-subtitle>\n        </v-card>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport {EventBus} from \"@/main\";\nexport default {\n  name: \"PhotoUploadEdition\",\n  props: {\n    actorId: {\n      type: String,\n      required: true\n    },\n  },\n  watch: {\n    actorId: {\n      handler: function () {\n        this.retrieveImages();\n      }\n    }\n  },\n  data: () => ({\n    titleRule: [\n      (v) => new RegExp(/^[a-zA-Z0-9\\s]*$/).test(v) || 'El título solo puede contener: Letras, números y espacios'\n    ],\n    photos: [],\n    newMultimedia: null,\n    uploading: false,\n  }),\n  created() {\n    this.initMultimedia();\n    this.retrieveImages();\n  },\n  methods: {\n    addFile(file){\n\n      if (file == null ||this.newMultimedia.name.length < 1){\n        EventBus.$emit('alert',{\n          color: 'red',\n          type: 'error',\n          msg: 'Debes especificar un archivo y un título'\n        });\n        return;\n      }\n\n      if (!new RegExp(/^[a-zA-Z0-9\\s]*$/).test(this.newMultimedia.name)){\n        EventBus.$emit('alert',{\n          color: 'red',\n          type: 'error',\n          msg: 'El título del archivo solo puede contener: Letras, números y espacios'\n        });\n        return;\n      }\n\n      this.uploading = true;\n      const fileToUpload = new FormData();\n      fileToUpload.append('cda_file',file);\n      this.newMultimedia.file = fileToUpload;\n      this.axios\n          .post(`/upload/photos/${this.actorId}/${this.newMultimedia.name}`,\n              this.newMultimedia.file\n          )\n          .then( res => {\n            EventBus.$emit('alert',{\n              color: 'green',\n              type: 'success',\n              msg: res.data.message\n            });\n            if (res.data.firstImage) EventBus.$emit('toActorGallery_reloadGallery');\n          })\n          .catch( e => {\n            if (e.response.status === 500){\n              EventBus.$emit('alert',{\n                color: 'red',\n                type: 'error',\n                msg: e.response.data.message\n              });\n            } else {\n              console.log(e);\n              EventBus.$emit('alert',{\n                color: 'red',\n                type: 'error',\n                msg: 'Ha ocurrido un error al subir el archivo'\n              });\n            }\n          })\n          .finally( () => {\n            this.uploading = false;\n            this.initMultimedia();\n            this.retrieveImages();\n          });\n    },\n    retrieveImages(){\n      this.axios\n          .get(`/images/retrieve/${this.actorId}`)\n          .then( res => {\n            this.photos = res.data.photos;\n            EventBus.$emit('toEditMultimedia_phoUpload_retrieveImg',this.photos);\n          })\n          .catch( e => {\n            console.log(e)\n            EventBus.$emit('alert',{\n              color: 'red',\n              type: 'error',\n              msg: e.response.data.message\n            });\n          });\n    },\n    changeMainImage(publicId){\n      this.axios\n          .post(`/images/main/${this.actorId}/${publicId}`)\n          .then( res => {\n            if (res.status === 200){\n              EventBus.$emit('alert',{\n                color: 'green',\n                type: 'success',\n                msg: res.data.message\n              });\n            }\n            this.retrieveImages();\n            EventBus.$emit('toActorGallery_reloadGallery');\n          })\n          .catch( e => {\n            EventBus.$emit('alert',{\n              color: 'red',\n              type: 'error',\n              msg: e.response.data.message\n            });\n          });\n    },\n    deleteImage(publicId){\n      this.axios\n          .delete(`/images/delete/${this.actorId}/${publicId}`)\n          .then( res => {\n            if (res.status === 200){\n              EventBus.$emit('alert',{\n                color: 'green',\n                type: 'success',\n                msg: res.data.message\n              });\n            }\n            this.retrieveImages();\n          })\n          .catch( e => {\n            EventBus.$emit('alert',{\n              color: 'red',\n              type: 'error',\n              msg: e.response.data.message\n            });\n          });\n    },\n    initMultimedia(){\n      this.newMultimedia = {\n        source: '',\n        name: '',\n        file: null\n      };\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}