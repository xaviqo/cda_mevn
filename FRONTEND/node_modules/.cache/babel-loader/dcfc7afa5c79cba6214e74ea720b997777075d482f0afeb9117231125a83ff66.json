{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { EventBus } from \"@/main\";\nexport default {\n  name: \"ActorEditSocial\",\n  props: {\n    actorId: {\n      type: String,\n      required: true\n    }\n  },\n  data: () => ({\n    allNetworksForCombo: ['Twitter', 'Youtube', 'Instagram', 'Facebook', 'Web'],\n    selectedNetworkNames: [],\n    allNetworks: [{\n      name: 'Twitter',\n      icon: 'mdi-twitter',\n      url: ''\n    }, {\n      name: 'Youtube',\n      icon: 'mdi-youtube',\n      url: ''\n    }, {\n      name: 'Instagram',\n      icon: 'mdi-instagram',\n      url: ''\n    }, {\n      name: 'Facebook',\n      icon: 'mdi-facebook',\n      url: ''\n    }, {\n      name: 'Web',\n      icon: 'mdi-earth',\n      url: ''\n    }],\n    actorNetworks: []\n  }),\n  watch: {\n    actorId: {\n      function() {\n        this.retrieveSocialInfo();\n      }\n    }\n  },\n  created() {\n    this.retrieveSocialInfo();\n    console.log(\"aqui llega\");\n    EventBus.$on('actorEditionForm_actorEditSocial_save', this.save);\n  },\n  methods: {\n    save() {\n      if (this.actorNetworks.length < 1) {\n        EventBus.$emit('alert', {\n          color: 'red',\n          type: 'error',\n          msg: 'Debes indicar al menos una red'\n        });\n        return;\n      }\n\n      //this.actorNetworks.forEach(n => delete n.icon);\n\n      EventBus.$emit('toActorEditionForm_save', {\n        media: this.actorNetworks\n      });\n    },\n    retrieveSocialInfo() {\n      this.actorNetworks = [];\n      this.selectedNetworkNames = [];\n      this.axios.get(`/social/retrieve/${this.actorId}`).then(res => {\n        res.data.media.forEach(m => {\n          this.selectedNetworkNames.push(m.name);\n          this.actorNetworks.push(m);\n        });\n      }).catch(e => {\n        EventBus.$emit('alert', {\n          color: 'red',\n          type: 'error',\n          msg: e.response.data.message\n        });\n      });\n    },\n    addNetwork(networksToAdd) {\n      // enter the new ones from the 'networksToAdd' array\n      networksToAdd.forEach(checkNetwork => {\n        if (!this.actorNetworks.some(actNet => actNet.name === checkNetwork)) {\n          this.actorNetworks.push(this.allNetworks.find(net => {\n            if (net.name === checkNetwork) {\n              return net;\n            }\n          }));\n        }\n      });\n      // delete those that are not present\n      this.actorNetworks = this.actorNetworks.filter(network => {\n        if (networksToAdd.includes(network.name)) {\n          return network;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAqCA;AAEA;EACAA;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;IACAC;IACAC,cACA;MACAR;MACAS;MACAC;IACA,GACA;MACAV;MACAS;MACAC;IACA,GACA;MACAV;MACAS;MACAC;IACA,GACA;MACAV;MACAS;MACAC;IACA,GACA;MACAV;MACAS;MACAC;IACA,EACA;IACAC;EACA;EACAC;IACAV;MACAW;QACA;MACA;IACA;EACA;EACAC;IACA;IACAC;IACAC,sDACA,UACA;EACA;EACAC;IACAC;MACA;QACAF;UACAG;UACAhB;UACAiB;QACA;QACA;MACA;;MAEA;;MAEAJ,0CACA;QAAAK;MAAA,EACA;IAEA;IACAC;MACA;MACA;MACA,WACAC,wCACAC;QACAC;UACA;UACA;QACA;MACA,GACAC;QACAV;UACAG;UACAhB;UACAiB;QACA;MACA;IACA;IACAO;MACA;MACAC;QACA;UACA,wBACA;YACA;cACA;YACA;UACA,GACA;QACA;MACA;MACA;MACA;QACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","props","actorId","type","required","data","allNetworksForCombo","selectedNetworkNames","allNetworks","icon","url","actorNetworks","watch","function","created","console","EventBus","methods","save","color","msg","media","retrieveSocialInfo","get","then","res","catch","addNetwork","networksToAdd"],"sourceRoot":"src/components/forms","sources":["ActorEditSocial.vue"],"sourcesContent":["<template>\n  <v-row>\n    <v-col>\n      <v-list\n          subheader\n      >\n        <v-subheader class=\"mt-4\">\n          <v-icon class=\"mr-4\">mdi-earth</v-icon>\n          REDES SOCIALES\n        </v-subheader>\n      </v-list>\n      <v-divider></v-divider>\n      <v-list>\n        <v-list-item>\n          <v-combobox\n              label=\"Redes disponibles\"\n              :items=allNetworksForCombo\n              multiple\n              chips\n              hide-selected\n              v-model=selectedNetworkNames\n              @change=addNetwork\n          ></v-combobox>\n        </v-list-item>\n        <v-list-item v-for=\"net in actorNetworks\" :key=net.name>\n          <v-text-field\n              :prepend-icon=net.icon\n              v-model=net.url\n              :label=\"'Direccion de '+net.name\"\n          ></v-text-field>\n        </v-list-item>\n      </v-list>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport {EventBus} from \"@/main\";\n\nexport default {\n  name: \"ActorEditSocial\",\n  props: {\n    actorId: {\n      type: String,\n      required: true\n    },\n  },\n  data: () => ({\n    allNetworksForCombo: ['Twitter','Youtube','Instagram','Facebook','Web'],\n    selectedNetworkNames: [],\n    allNetworks: [\n      {\n        name: 'Twitter',\n        icon: 'mdi-twitter',\n        url: ''\n      },\n      {\n        name: 'Youtube',\n        icon: 'mdi-youtube',\n        url: ''\n      },\n      {\n        name: 'Instagram',\n        icon: 'mdi-instagram',\n        url: ''\n      },\n      {\n        name: 'Facebook',\n        icon: 'mdi-facebook',\n        url: ''\n      },\n      {\n        name: 'Web',\n        icon: 'mdi-earth',\n        url: ''\n      }\n    ],\n    actorNetworks: [],\n  }),\n  watch: {\n    actorId:{\n      function () {\n        this.retrieveSocialInfo();\n      }\n    }\n  },\n  created() {\n    this.retrieveSocialInfo();\n    console.log(\"aqui llega\")\n    EventBus.$on('actorEditionForm_actorEditSocial_save',\n      this.save\n    );\n  },\n  methods: {\n    save(){\n      if (this.actorNetworks.length < 1){\n        EventBus.$emit('alert',{\n          color: 'red',\n          type: 'error',\n          msg: 'Debes indicar al menos una red'\n        });\n        return;\n      }\n\n      //this.actorNetworks.forEach(n => delete n.icon);\n\n      EventBus.$emit('toActorEditionForm_save',\n          { media: this.actorNetworks }\n      );\n\n    },\n    retrieveSocialInfo(){\n      this.actorNetworks = [];\n      this.selectedNetworkNames = [];\n      this.axios\n          .get(`/social/retrieve/${this.actorId}`)\n          .then( res => {\n            res.data.media.forEach( m => {\n              this.selectedNetworkNames.push(m.name);\n              this.actorNetworks.push(m);\n            });\n          })\n          .catch( e => {\n            EventBus.$emit('alert',{\n              color: 'red',\n              type: 'error',\n              msg: e.response.data.message\n            });\n          });\n    },\n    addNetwork(networksToAdd){\n      // enter the new ones from the 'networksToAdd' array\n      networksToAdd.forEach( checkNetwork => {\n        if (!this.actorNetworks.some( actNet => actNet.name === checkNetwork)) {\n          this.actorNetworks.push(\n              this.allNetworks.find( net => {\n                if (net.name === checkNetwork){\n                  return net;\n                }\n              })\n          );\n        }\n      });\n      // delete those that are not present\n      this.actorNetworks = this.actorNetworks.filter( network => {\n        if (networksToAdd.includes(network.name)){\n          return network;\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}